<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>朝码夕拾</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.bytedusk.com/"/>
  <updated>2021-01-19T06:07:37.974Z</updated>
  <id>http://www.bytedusk.com/</id>
  
  <author>
    <name>ByteDusk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Object/XML Mapping (O/X Mapping)</title>
    <link href="http://www.bytedusk.com/2020/07/20/xml-vs-bean/"/>
    <id>http://www.bytedusk.com/2020/07/20/xml-vs-bean/</id>
    <published>2020-07-19T16:00:00.000Z</published>
    <updated>2021-01-19T06:07:37.974Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>O/X Mapping 指 Java 对象与 XML 文档对象之间的转换，这是个古老的话题。可选的方案有：</p><ul><li>XMLBeans：目前主要作为 Apache POI 的模块，用于文档对象转换</li><li><strong>JAXB：选择 JAXB 在于作为语言特性，轻量级，结合性良好</strong></li><li>XStream：对命名空间支持较弱、默认对任何类都可以进行转换，较低版本存在安全漏洞，<strong>互联网业务慎用</strong></li><li>Castor：2004 年停止维护</li><li>JiBX：最终版本 1.2.3，2011 年停止维护</li></ul><p>最早 JSR31 发布 Jaxb1.0 版本，JSR 222 发布 Jaxb2.0，JDK1.6 并引入作为一部分。 最新版本 3.0 命名为 Jakarta XML Binding，作为 Jakarta EE 9 一部分。在JDK1.6/Jaxb 2.0 以下版本的环境中，使用过程中存在诸多问题。以下讨论仅限于 JDK6/Jaxb2.0 以上版本。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://javaee.github.io/jaxb-v2/doc/user-guide/ch02.html" target="_blank" rel="noopener">JAXB Release Notes</a></li><li><a href="http://x-stream.github.io/index.html" target="_blank" rel="noopener">x-stream</a></li><li><a href="https://blog.csdn.net/wzp1124358508/article/details/94738879" target="_blank" rel="noopener">JAXB转换对象到XML前缀ns2:的问题解决方案</a></li><li><a href="https://blog.csdn.net/zl3450341/article/details/8155146" target="_blank" rel="noopener">JAXB的应用，及如何自定义namespace的prefix(前缀）</a></li><li><a href="https://stackoverflow.com/questions/2252028/jaxb-how-to-avoid-repeated-namespace-definition-for-xmlnsxsi" target="_blank" rel="noopener">JAXB: How to avoid repeated namespace definition for xmlns:xsi</a></li><li><a href="https://blog.csdn.net/a771795183/article/details/104133310" target="_blank" rel="noopener">JAXB-1 JAXB 概述</a></li><li><a href="https://projects.eclipse.org/projects/ee4j.jaxb" target="_blank" rel="noopener">Jakarta XML Binding</a></li></ul><h2 id="Jaxb-转换方案"><a href="#Jaxb-转换方案" class="headerlink" title="Jaxb 转换方案"></a>Jaxb 转换方案</h2><h3 id="处理麻烦点"><a href="#处理麻烦点" class="headerlink" title="处理麻烦点"></a>处理麻烦点</h3><ul><li>命名空间前缀问题</li><li>CDATA 转义问题</li></ul><h3 id="定义-package-info-java"><a href="#定义-package-info-java" class="headerlink" title="定义 package-info.java"></a>定义 package-info.java</h3><p>解决命名中自定义前缀及程序生成的前缀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@XmlSchema</span>(namespace = <span class="string">"https://www.bytedusk.com"</span>, </span><br><span class="line">xmlns = &#123; <span class="meta">@XmlNs</span>(namespaceURI = <span class="string">"https://www.bytedusk.com"</span>, prefix = <span class="string">""</span>), </span><br><span class="line"><span class="meta">@XmlNs</span>(namespaceURI = <span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>, prefix = <span class="string">"xsi"</span>)</span><br><span class="line">&#125;,</span><br><span class="line">elementFormDefault = XmlNsForm.QUALIFIED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.bytedusk.dev.biz.sundry.jaxb.model;</span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlNs;</span><br></pre></td></tr></table></figure><p>前缀问题主要在于 NamespacePrefixMapper ，未设置命名空间的项将使用程序自动生成的前缀，所以解决办法就有两种：</p><ul><li>为所有的项加上命名空间<ul><li>显式：给所有变量加注解 @XmlElement(namespace=”<a href="https://www.bytedusk.com&quot;">https://www.bytedusk.com&quot;</a>) </li><li>隐式：在 package-info.java 指定 namespace = “<a href="https://www.bytedusk.com&quot;">https://www.bytedusk.com&quot;</a></li></ul></li><li>重载 NamespacePrefixMapper 根据不同命名空间返回不同前缀。</li></ul><h3 id="解决-CDATA-问题"><a href="#解决-CDATA-问题" class="headerlink" title="解决 CDATA 问题"></a>解决 CDATA 问题</h3><ul><li>解决 CDATA 转义的问题思路就是，在待处理的变量上加注解，通过动态代理方式，在 Jaxb 处理前做转义。<br>EclipseLink 提供了一种 JaxbContext 实现方式来处理 CDATA。</li></ul><p>配置：JaxbContext 对应扫描的 package 添加 jaxb.properties，内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javax.xml.bind.context.factory=org.eclipse.persistence.jaxb.JAXBContextFactory</span><br></pre></td></tr></table></figure><p>代码中注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@XmlAccessorType</span>(XmlAccessType.FIELD)</span><br><span class="line"><span class="meta">@XmlType</span>(name=<span class="string">""</span>, propOrder=&#123;<span class="string">"xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@XmlCDATA</span></span><br><span class="line">    <span class="keyword">private</span> String xml;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getXml</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> xml;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setXml</span><span class="params">(String xml)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.xml = xml;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注意：EclipseLink 2.7.4 与 Spring ORM 4.3.5 冲突</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;O/X Mapping 指 Java 对象与 XML 文档对象之间的转换，这是个古老的话题。可选的方案有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XML
      
    
    </summary>
    
    
      <category term="XML" scheme="http://www.bytedusk.com/tags/XML/"/>
    
      <category term="WEBSERVICE" scheme="http://www.bytedusk.com/tags/WEBSERVICE/"/>
    
  </entry>
  
  <entry>
    <title>WebService Mtom与Header</title>
    <link href="http://www.bytedusk.com/2020/04/30/ws-mtom-header/"/>
    <id>http://www.bytedusk.com/2020/04/30/ws-mtom-header/</id>
    <published>2020-04-29T16:00:00.000Z</published>
    <updated>2021-01-19T06:07:37.974Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景相关"><a href="#背景相关" class="headerlink" title="背景相关"></a>背景相关</h2><p>项目涉及向三方单方向访问 WebService 服务，选择 Spring-WS 主要基于两点，一、项目开发框架采用了 Spring 框架，二、Spring-WS 相对来说比较轻量级，WebService 使用了自定义的请求头，且文件传输过程中使用 base64的方式。下面记录了开发过程中遇到的问题</p><h2 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h2><ul><li><p>版本的区别主要在于 SOAP 的版本，分为 SOAP 1.1 与 SOAP 1.2。</p></li><li><p>请求与响应的个性化处理：添加请求头、解析响应头、记录 xml 报文。一种方法是分别继承 WebServiceMessageExtractor、WebServiceMessageCallback 进行处理。另外一种就是实现拦截器进行处理。项目中采用了第一种，是因为请求头和响应头是完整交易的一部分，需要和报文体一起记录下来。所以抽象出了WebService Client。 以 base64String 传输文件时，需考虑报文中文件的过滤问题。</p></li><li><p>对于 DOM 树处理上有 SAAJ 和 Axiom 两种。由于文件以 base64String 形式传输，项目中使用了第一种。实际上文件以 Mtom 方式传输时，Spring-WS 的 SAAJ 设计是有问题的。SAAJ 在文件传输处理上，传输时以流的方式打开文件，然后包装成 DataSource 和 DataHandler，接受文件时反之写入文件，默认为  base64String 格式。若需要以 MTOM 附件方式传输，显示开启 MtomEnable，后台需要遍历 Attachment，获取到对应附件，然后以流的方式写入文件。</p></li><li><p>对于实例化 Marshaller 与 Unmarshaller 的时候，显式创建对象工厂，并指名所在的包路径</p></li><li><p>Spring-WS 作为 Spring Framework 子模块秉承了约定优于配置的原则，使用 sws:annotation-driven 将显式注册XmlRootElementPayloadMethodProcessor 与 JaxbElementPayloadMethodProcessor，注册顺序早于MarshallingPayloadMethodProcessor，导致自定义的 Marshaller 与 unmarshaller不会调用，即客户端指定的 MtomEnable 不生效，文件将变为 base64String 类型。解决办法就是手动指定 MarshallingPayloadMethodProcessor 注册顺序早于前两个处理器。另外一个问题就是 sws:annotation-driven 可以允许在 Enpoint 的方法中以 SoapHeader 注解的方式接受请求头；而为了 Mtom 传输自定义处理器的注册顺序，请求和 Endpoint 的处理方法以方法签名严格映射，无法处理 SoapHeader。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Spring-WS 整体设计上还是松散的，自由度高意味着不好用，需要的功能自己定制。<strong>如果能够使用 Springboot，依照官方的示例，配置上将非常省心。</strong>。如果需求较为复杂时，建议使用 Apache CXF。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="http://veithen.io/2015/01/03/spring-ws-extracting-soap-headers-from-responses.html" target="_blank" rel="noopener">Extracting SOAP headers from a Web service response in Spring-WS</a></p></li><li><p><a href="https://docs.oracle.com/javaee/5/tutorial/doc/bnbhr.html#bnbht" target="_blank" rel="noopener">SAAJ Tutorial|The Java EE 5 Tutorial</a></p></li><li><p><a href="https://dzone.com/articles/use-mtom-to-efficiently-transmit-binary-content-in" target="_blank" rel="noopener">Use MTOM to Efficiently Transmit Binary Content in SOAP</a></p></li><li><p><a href="https://github.com/code-not-found/spring-ws.git" target="_blank" rel="noopener">gitbhub : code-not-found/spring-ws</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景相关&quot;&gt;&lt;a href=&quot;#背景相关&quot; class=&quot;headerlink&quot; title=&quot;背景相关&quot;&gt;&lt;/a&gt;背景相关&lt;/h2&gt;&lt;p&gt;项目涉及向三方单方向访问 WebService 服务，选择 Spring-WS 主要基于两点，一、项目开发框架采用了 Spr
      
    
    </summary>
    
    
      <category term="XML" scheme="http://www.bytedusk.com/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>Java Service Wrapper 封装 Jar 为 Windows服务</title>
    <link href="http://www.bytedusk.com/2019/11/30/wrapper-jar-win-service/"/>
    <id>http://www.bytedusk.com/2019/11/30/wrapper-jar-win-service/</id>
    <published>2019-11-29T16:00:00.000Z</published>
    <updated>2021-01-19T06:07:37.970Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="(https://www.krenger.ch/blog/tag/java-service-wrapper/">SIMON KRENGER的博客</a></li></ul><h3 id="须知"><a href="#须知" class="headerlink" title="须知"></a>须知</h3><ul><li>由于官方不提供 x64 社区版，此版本由 <a href="https://www.krenger.ch/" target="_blank" rel="noopener">SIMON KRENGER</a> 根据社区版源码编译 </li><li>使用版本 Java Service Wrapper Community Edition 3.5.36，<a href="https://www.krenger.ch/blog/tag/java-service-wrapper/" target="_blank" rel="noopener">下载地址</a></li></ul><h3 id="安装注意事项"><a href="#安装注意事项" class="headerlink" title="安装注意事项"></a>安装注意事项</h3><ul><li><p>安装前需要配置 JRE 环境，设置 JAVA_HOME 环境变量</p></li><li><p>安装包主要包含如下：<br>WrapperTest<br>  |—bin #来自于wrapper_windows-x86-64-3.5.36\bin 目录<br>  |&emsp;|— InstallTestWrapper-NT.bat<br>  |&emsp;|—TestWrapper.bat<br>  |&emsp;|— UninstallTestWrapper-NT.bat<br>  |&emsp;|— wrapper.exe<br>  |—conf  #来自于wrapper_windows-x86-64-3.5.36\conf 目录<br>  |&emsp;|—wrapper.conf<br>  |—lang<br>  |—lib  #来自于wrapper_windows-x86-64-3.5.36\lib 目录<br>  |&emsp;|— wrapper-test.jar  #待替换的jar<br>  |&emsp;|—wrapper.dll<br>  |&emsp;|–wrapper.jar<br>  |—logs</p></li><li><p>主要待修改文件如下<br>conf/wrapper.conf中修改如下：</p><p>  由于使用SimpleApp方式安装服务，此处需要使用设定值如下<br>  # Java Main class.  This class must implement the WrapperListener interface<br>  #  or guarantee that the WrapperManager class is initialized.  Helper<br>  #  classes are provided to do this for you.<br>  #  See the following page for details:<br>  #  <a href="http://wrapper.tanukisoftware.com/doc/english/integrate.html" target="_blank" rel="noopener">http://wrapper.tanukisoftware.com/doc/english/integrate.html</a><br>  <strong>wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperSimpleApp</strong></p><p>  # Java Classpath (include wrapper.jar)  Add class path elements as<br>  #  needed starting from 1<br>  <strong>wrapper.java.classpath.1=../lib/wrapper-test.jar #待替换jar包</strong></p><p>  # Application parameters.  Add parameters as needed starting from 1<br>  <strong>wrapper.app.parameter.1=com.bytedusk.wrapper.test.WrapperTest  #Jar包中带main方法的主类</strong></p><p>  # Name of the service 服务名<br>  <strong>wrapper.name=testwrapper</strong></p><p>  # Display name of the service  服务显示名<br>  <strong>wrapper.displayname=Test Wrapper Sample Application</strong></p><p>  # Description of the service 服务描述<br>  <strong>wrapper.description=Test Wrapper Sample Application Description</strong></p></li></ul><p>注：    服务名与显示名称的区别：服务名称是系统定义的，用于区别其他服务的标识; 而显示名称是显示在services.msc里的名称。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;(https://www.krenger.ch/blog/tag/java-service-wrapper/&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Maven POM 文件简要解析</title>
    <link href="http://www.bytedusk.com/2019/09/25/maven/"/>
    <id>http://www.bytedusk.com/2019/09/25/maven/</id>
    <published>2019-09-24T16:00:00.000Z</published>
    <updated>2021-01-19T07:37:39.306Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://maven.apache.org/pom.html" target="_blank" rel="noopener">Apache POM Reference</a> </li><li><a href="http://maven.apache.org/plugins/index.html" target="_blank" rel="noopener">Maven Available Plugins</a></li><li><a href="https://stackoverflow.com/questions/10567551/difference-between-maven-source-plugin-jar-and-jar-no-fork-goal" target="_blank" rel="noopener">Difference between Maven source plugin jar and jar-no-fork goal?</a></li></ul><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><p>通过调整依赖中 scope 的范围和 optional 可以避免开发、测试及运行环境中不同组件包的冲突，循环依赖问题。</p><h3 id="常见插件"><a href="#常见插件" class="headerlink" title="常见插件"></a>常见插件</h3><ul><li><p>maven-deploy-plugin：发布组件/工程到远程仓库，需要在 distriutionManagement 中配置仓库信息，并在 maven.settings.xml 中配置仓库所在服务器的账户信息；或者以文件部署方式只指定文件路径。</p></li><li><p><strong>maven-compiler-plugin：</strong> 在编译阶段指定待编译资源的 Javac 版本或运行环境的 Java 版本。<strong>通过指定 Java 版本，此插件可以解决编译环境或持续集成环境 Java 版本高于实际部署环境版本的问题</strong></p></li><li><p>maven-jar-plugin：将已编译的类文件和资源文件打包为 Jar，带签名的可以使用 <a href="http://maven.apache.org/plugins/maven-jarsigner-plugin/" target="_blank" rel="noopener">Maven Jarsigner Plugin</a></p></li><li><p>maven-surefire-plugin：执行指定的测试代码，可以将结合 TsetNG，JUnit 以及自定义的测试代码。</p></li><li><p>maven-source-plugin：源码打包到 Jar，使用 jar-no-fork 时，和打 jar 包生命周期中后续的相关操作不会再次执行。</p></li><li><p>jetty-maven-plugin：开发过程中提供 jetty 容器作为应用运行环境。</p></li><li><p>maven-javadoc-plugin：使用 javadoc 工具为项目生成 javadoc</p></li><li><p>maven-gpg-plugin：使用 GnuPG（GNU Privacy Guard、GPG 开源加密软件） 对项目所以 artifact 进行签名。或者签名后再发布到远程仓库</p></li><li><p>maven-enforcer-plugin：约束条件检查，用户可自定义约束条件</p></li></ul><h3 id="针对自定义Jar包的处理"><a href="#针对自定义Jar包的处理" class="headerlink" title="针对自定义Jar包的处理"></a>针对自定义Jar包的处理</h3><p>建议伴随工程，设置仓库（仅包含自定Jar），每次更新都使用此仓库，不会受其他影响，也不会影响构建过程。<br>主要思路：将隶属与本工程的仓库目录设置在 parent 工程下，然后使用 maven install 命令上传到本地仓库，然后将相关文件复制到parent工程下的仓库文件中。</p><ul><li><p>上传到本地仓库</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file \ </span><br><span class="line"> -DgroupId=com.customized \ </span><br><span class="line"> -DartifactId=customized \</span><br><span class="line"> -Dversion=<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span> \</span><br><span class="line"> -Dpackaging=jar \</span><br><span class="line"> -Dfile=/jar-place/customized-<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span>.jar</span><br></pre></td></tr></table></figure></li><li><p>组织结构如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xxx-parent</span><br><span class="line">   |-----xxx-conf</span><br><span class="line">   |-----xxx-app</span><br><span class="line">   |-----xxx-web</span><br><span class="line">   |-----xxx-common</span><br><span class="line">   |-----local_repo</span><br><span class="line">          |-----com</span><br></pre></td></tr></table></figure></li><li><p>pom 文件中配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>local_repo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>local_repos<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>file://$&#123;project.basedir&#125;/local_repo<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>ignore<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="不同的切换环境"><a href="#不同的切换环境" class="headerlink" title="不同的切换环境"></a>不同的切换环境</h3><ul><li><p>profiles 定义了各个环境的变量</p><p>构建时使用命令行： mvm build clean package -P dev 或者使用 eclipse run configure 配置：Goals: clean package, Profiles: dev</p><p><strong>注意</strong>：properties 中 module-config-home 与 common-config-home 的不同</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.app-name</span>&gt;</span>$&#123;app-name&#125;<span class="tag">&lt;/<span class="name">maven.app-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.common-config-home</span>&gt;</span>$&#123;project.build.directory&#125;/../../../spring-seed-conf/dev<span class="tag">&lt;/<span class="name">maven.common-config-home</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.module-config-home</span>&gt;</span>$&#123;project.build.directory&#125;/../../spring-seed-conf/dev<span class="tag">&lt;/<span class="name">maven.module-config-home</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.log-home</span>&gt;</span>$&#123;project.build.directory&#125;/../../../../seed-log<span class="tag">&lt;/<span class="name">maven.log-home</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.log-level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">maven.log-level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.log-queue-size</span>&gt;</span>256<span class="tag">&lt;/<span class="name">maven.log-queue-size</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.app-name</span>&gt;</span>$&#123;app-name&#125;<span class="tag">&lt;/<span class="name">maven.app-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.common-config-home</span>&gt;</span>d:/spring-seed-conf/release<span class="tag">&lt;/<span class="name">maven.common-config-home</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.log-home</span>&gt;</span>d:/spring-seed-log/seed-log<span class="tag">&lt;/<span class="name">maven.log-home</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.log-level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">maven.log-level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.log-queue-size</span>&gt;</span>256<span class="tag">&lt;/<span class="name">maven.log-queue-size</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>build 部分对配置文件的运行环境变量进行替换</p><p>  resouces 指明了存在待替换变量的文件所在的目录，此处待替换的变量即 profiles 中定义的环境相关变量。或者使用 filter 指定 src/main/resources 中特定文件，将文件用到的环境变量在打包时根据配置替换成固定值</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://maven.apache.org/pom.html&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
    
      <category term="CI" scheme="http://www.bytedusk.com/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat 安全加固及性能优化</title>
    <link href="http://www.bytedusk.com/2019/06/17/tomcat-safety-enhanced/"/>
    <id>http://www.bytedusk.com/2019/06/17/tomcat-safety-enhanced/</id>
    <published>2019-06-16T16:00:00.000Z</published>
    <updated>2021-01-19T06:07:37.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/panwenbin-logs/p/8177523.html" target="_blank" rel="noopener">tomcat安全加固和规范</a></li><li><a href="http://tomcat.apache.org/tomcat-7.0-doc/index.html" target="_blank" rel="noopener">tomcat-7.0-doc</a></li><li><a href="https://blog.51cto.com/watertoeast/2068372" target="_blank" rel="noopener">windows下以普通用户权限启动apache服务</a></li><li><a href="https://help.aliyun.com/knowledge_detail/37421.html" target="_blank" rel="noopener">Tomcat服务安全加固</a></li></ul><h2 id="基于版本-7-0-50"><a href="#基于版本-7-0-50" class="headerlink" title="基于版本 7.0.50"></a>基于版本 7.0.50</h2><h3 id="支持的特性"><a href="#支持的特性" class="headerlink" title="支持的特性"></a>支持的特性</h3><blockquote><ul><li>Servlet 3.0 Specification and Javadoc</li><li>JSP 2.2 and EL 2.2 Specifications, JSP 2.2 Javadoc (note it is  labelled as JSP 2.1), EL 2.2 Javadoc</li><li>WebSocket 1.1 Specification and Javadoc</li></ul></blockquote><h2 id="主要措施"><a href="#主要措施" class="headerlink" title="主要措施"></a>主要措施</h2><h3 id="版本安全，使用最新稳定版"><a href="#版本安全，使用最新稳定版" class="headerlink" title="版本安全，使用最新稳定版"></a>版本安全，使用最新稳定版</h3><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><ul><li><p>linux</p><ul><li><p>规划用户和用户组</p></li><li><p>修改 catalina.sh 配置</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Copy CATALINA_BASE from CATALINA_HOME if not already set  </span><br><span class="line">[ -z "$CATALINA_BASE" ] &amp;&amp; CATALINA_BASE="$CATALINA_HOME"  </span><br><span class="line"></span><br><span class="line"># 设置pid。一定要加在CATALINA_BASE定义后面，要不然pid会生成到/下面  </span><br><span class="line">CATALINA_PID="$CATALINA_BASE/tomcat.pid"</span><br></pre></td></tr></table></figure><ul><li><p>未设置JAVA_HOME，JRE_HOME时，catalina.sh 头部添加 JAVA_HOME，JRE_HOME，不添加可能导致服务启动失败</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/java</span><br><span class="line">export JRE_HOME=/usr/lib/java/jre</span><br></pre></td></tr></table></figure></li><li><p>针对使用 systemctl 管理服务，编写 tomcat.service，并放置于<br> /lib/systemd/system 目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload //修改tomcat.service文件后使其生效</span><br><span class="line"></span><br><span class="line">systemctl start tomcat</span><br><span class="line">systemctl start tomcat.service //启动tomcat服务</span><br><span class="line">systemctl enable tomcat.service //设置开机自启动</span><br><span class="line">systemctl disable tomcat.service //停止开机自启动</span><br><span class="line">systemctl status tomcat.service //查看服务当前状态</span><br><span class="line">systemctl restart tomcat.service //重新启动服务</span><br><span class="line">systemctl list-units --type=service //查看所有已启动的服务</span><br></pre></td></tr></table></figure><p>tomcat.service：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=tomcat</span><br><span class="line">After=syslog.target network.target remote-fs.target nss-lookup.target</span><br><span class="line">#不同操作系统下，After 后跟的服务名略有不同</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">#User=tmct_user</span><br><span class="line">#Group=tmct_user</span><br><span class="line">#suse中 用户启动存在问题</span><br><span class="line"></span><br><span class="line">Type=forking</span><br><span class="line"></span><br><span class="line">ExecStart=$TMCT_HOME/bin/startup.sh</span><br><span class="line">#ExecStop=$TMCT_HOME/bin/shutdown.sh</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>运行效果：<br><img src="../pic/linux-tomcat-pid.png" alt=" "></p></li></ul></li><li><p>windows</p><p>在 windows 下安装 apache，默认情况下，apache 以本地系统权限启动服务，权限过高，存在安全隐患。以普通用户权限启动apache服务的步骤如下：</p><ul><li><p>添加一个普通用户 tmct_user</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> user tmct_user /add #添加用户 tmct_user</span><br><span class="line"><span class="built_in">net</span> localgroup users tmct_user /<span class="built_in">del</span> #该用户不属于任何组</span><br></pre></td></tr></table></figure></li><li><p>打开服务管理器，在 tomcat 服务的属性页的登录选项卡下，选中“此用户”，然后输入 tmct_user 及其密码，并设置永不过期</p></li><li><p>tomcat 安装目录权限：其他继承父目录权限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apache-tomcat   //读取和执行、列出文件内容、读取</span><br><span class="line">    ├── bin</span><br><span class="line">    ├── conf</span><br><span class="line">    ├── lib</span><br><span class="line">    ├── logs    //读取、写入</span><br><span class="line">    ├── temp</span><br><span class="line">    ├── webapps //读取</span><br><span class="line">    ├── work</span><br></pre></td></tr></table></figure></li></ul></li><li><p>重启 tomcat 服务（如果失败，请重启操作系统）</p></li></ul><h3 id="端口保护"><a href="#端口保护" class="headerlink" title="端口保护"></a>端口保护</h3><ul><li><p>默认关闭端口 8005 端口值设置为 -1 表示禁用此端口。</p></li><li><p>注释 AJP 端口。</p></li><li><p>更改默认 8080 端口号</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"-1"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;Connector port="8009" protocol="AJP/1.3" redirectPort="8443" /&gt; --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>更改 tomcat 管理端口 8005 ，此端口有权限关闭 tomcat 服务，但要求端口配置在 8000~8999 之间，并更改 shutdown 执行的命令</li><li>AJP Connector 利用 AJP13 协议同其他 web 容器进行通信。可以配合 Apache 的 proxy_ajp 模块进行反向代理，暴露成 http 协议给客户端访问，用来做负载均衡或者监控。</li></ul><h3 id="网络访问控制"><a href="#网络访问控制" class="headerlink" title="网络访问控制"></a>网络访问控制</h3><ul><li><p>不需要使用 Tomcat 管理后台管理业务代码，建议您使用安全组防火墙功能对管理后台 URL 地址进行拦截，或直接将 Tomcat 部署目录中 webapps 文件夹中的 manager、host-manager 文件夹全部删除，并注释 Tomcat 目录中 conf 文件夹中的 tomcat-users.xml 文件中的所有代码。</p></li><li><p>需要使用 Tomcat 管理后台进行业务代码的发布和管理，建议为 Tomcat 管理后台配置强口令，并修改默认 admin 用户，且密码长度不低于10位，必须包含大写字母、特殊符号、数字组合。</p></li><li><p>将 tomcat 应用根目录配置为 tomcat 安装目录以外的目录</p></li></ul><h3 id="隐藏-tomcat-的版本信息，修改-banner"><a href="#隐藏-tomcat-的版本信息，修改-banner" class="headerlink" title="隐藏 tomcat 的版本信息，修改 banner"></a>隐藏 tomcat 的版本信息，修改 banner</h3><ul><li><p>隐藏版本：针对该信息的显示是由一个 jar 包控制的，该 jar 包存放在 $CATALINA_HOME/lib 目录下，名称为 catalina.jar。该 jar 目录有 META-INF 和 org ,<br>修改 org/apache/catalina/util/ServerInfo.properties 文件中的 serverinfo 字段来实现来更改我们 tomcat 的版本信息</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.info= WebServer</span><br><span class="line">server.number=0.0.0.0</span><br></pre></td></tr></table></figure></li><li><p>修改 server 属性：tomcat 的 conf/server.xml 找到修改后如下：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">redirectPort</span>=<span class="string">"8443"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">useBodyEncodingForURI</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">server</span>=<span class="string">"WebServer/0.0.0.0"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="关闭热部署"><a href="#关闭热部署" class="headerlink" title="关闭热部署"></a>关闭热部署</h3><p>默认Tomcat 是开启了对war包的热部署。为了防止被植入恶意程序，因此我们要关闭自动部署。修改 conf/server.xml，将 unpackWARs 和 autoDeploy 由原先 true 都改为 false ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">""</span> <span class="attr">unpackWARs</span>=<span class="string">"false"</span> <span class="attr">autoDeploy</span>=<span class="string">"false"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多实例"><a href="#多实例" class="headerlink" title="多实例"></a>多实例</h3><p>强烈建议不要使用 Tomcat 的虚拟主机，推荐每个站点使用一个实例。即，可以启动多个 Tomcat，而不是启动一个 Tomcat 里面包含多个虚拟主机。</p><p>因为 Tomcat 是多线程，共享内存，任何一个虚拟主机中的应用崩溃，都会影响到所有应用程序。虽然采用多实例的方式会产生过多的开销，但至少保障了应用程序的隔离和安全。</p><h3 id="访问日志格式规范"><a href="#访问日志格式规范" class="headerlink" title="访问日志格式规范"></a>访问日志格式规范</h3><p>开启 tomcat 默认访问日志中 Referer 和 User-Agent 记录，修改 conf/server.xml，标准配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">directory</span>=<span class="string">"logs"</span> <span class="attr">prefix</span>=<span class="string">"localhost_access_log"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b %&#123;Referer&#125;i %&#123;User-Agent&#125;i %D"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">resolveHosts</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="重定向错误页面"><a href="#重定向错误页面" class="headerlink" title="重定向错误页面"></a>重定向错误页面</h3><p>修改访问 Tomcat 错误页面的返回信息，在 webapps/manger 目录中创建相应的401.html、404.htm、500.htm 文件，然后在 conf/web.xml 文件的最后一行之前添加下列代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>401<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/401.htm<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/404.htm<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/500.htm<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>网页访问错误<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>网页访问错误，错误代码：404<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="屏蔽目录文件自动列出"><a href="#屏蔽目录文件自动列出" class="headerlink" title="屏蔽目录文件自动列出"></a>屏蔽目录文件自动列出</h3><p>编辑 conf/web.xml 文件，防止直接访问目录时由于找不到默认页面，而列出目录下的文件的情况。在 web.xml 文件中，将 <param-name>listings</param-name> 对应指 <param-value>ture</param-value> 改成<param-value>false</param-value></p><p><strong>本版中已默认配置不列出</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        org.apache.catalina.servlets.DefaultServlet</span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>listings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/panwenbin-logs/p/8177523.html&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>VS 压力负载测试环境配置</title>
    <link href="http://www.bytedusk.com/2017/07/04/vs-load-runner/"/>
    <id>http://www.bytedusk.com/2017/07/04/vs-load-runner/</id>
    <published>2017-07-03T16:00:00.000Z</published>
    <updated>2021-01-19T06:07:37.970Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h3><ul><li><a href="http://blog.miniasp.com/post/2011/03/13/Visual-Studio-Agent-2010-Load-and-Stress-Testing-Installation-Guide.aspx" target="_blank" rel="noopener">使用 Visual Studio 2010 Ultimate 及 Agent 進行負載壓力測試</a></li><li><a href="https://msdn.microsoft.com/en-us/library/dd695837.aspx" target="_blank" rel="noopener">Managing Test Controllers and Test Agents with Visual Studio</a></li><li><a href="https://msdn.microsoft.com/en-us/library/ms404661&#40;v=vs.100&#41;.aspx" target="_blank" rel="noopener">Unable to Collect Performance Counters</a></li><li><a href="http://blogs.catapultsystems.com/tlingenfelder/archive/2009/06/18/performance-counters-timeouts-and-load-testing-with-visual-studio-2008/" target="_blank" rel="noopener">Performance Counters Timeouts and Load Testing with Visual Studio 2008</a></li><li><a href="https://stackoverflow.com/questions/14811973/unable-to-get-performance-counters-from-certain-servers-when-running-load-tests" target="_blank" rel="noopener">Unable to get performance counters from certain servers when running load tests</a></li></ul><h3 id="相关环境："><a href="#相关环境：" class="headerlink" title="相关环境："></a>相关环境：</h3><ul><li>Win 10 + Visual Studio 2017 企业版 + SQLServer Express 2016</li></ul><h3 id="主要步骤："><a href="#主要步骤：" class="headerlink" title="主要步骤："></a>主要步骤：</h3><ul><li><p><strong>安装 Test Controller 与 Test Agent</strong><br>在局域网内搭建负载测试，不要求创建域，但必须位于同一用户组。安装成功后，一般情况下 Controller 与 Agent 的名称为机器名</p></li><li><p><strong>配置 Test Controller</strong><br>指定负载测试结果存储的数据库的连接字符串，即 SSMS (SQL Sever Manager Studio)连接时指定的服务器名，或者为主机名\数据库实例名。具体内容取决于数据库的配置情况。</p></li><li><p><strong>Test Agent 注册到 Controller</strong><br>注册时使用的用户必须分别存在于 Agent 与 Controller 所在的主机，并且该用户处于以下用户组中：</p><ul><li>TeamTestControllerAdmins</li><li>TeamTestControllerUsers</li><li>TeamTestAgentService</li><li>Administrators</li></ul></li><li><p><strong>连接成功</strong><br>对于添加负载测试的项目，才可以在 VS 中查看连接状态：菜单栏 -&gt; 负载测试 -&gt; 管理 Test Controller ， 即可看到代理和状态，连接成功时的状态为就绪。</p></li><li><p><strong>运行负载测试中可能遇到的问题</strong></p><ul><li><p>无法在计算机“ <strong>*</strong> ” (找不到网络路径。)  上访问性能计数器类别“Memory”； 请检查类别名称和计算机名称是否正确</p></li><li><p><strong>解决方法：</strong> 查看目标机器上 Remote Registry、Windows Time、TCP/IP NetBIOS Helper 服务是否开启</p></li><li><p>无法在计算机“ <strong>*</strong> ” (拒绝访问。)  上访问性能计数器类别“Memory”； 请检查类别名称和计算机名称是否正确。</p></li><li><p><strong>解决方法：</strong> 造成此问题可能有如下原因：</p><ol><li>为 Performance logs and alerts 服务增加防火墙例外</li><li>将用户增加到 Performance Log Users、Performance Monitor Users、Administrators 组中</li><li>开启 Performance logs and alerts  服务</li><li>增加计数器的超时时长（Counter Timeouts）</li></ol></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;参考博客：&quot;&gt;&lt;a href=&quot;#参考博客：&quot; class=&quot;headerlink&quot; title=&quot;参考博客：&quot;&gt;&lt;/a&gt;参考博客：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.miniasp.com/post/2011/03/13/Vis
      
    
    </summary>
    
    
      <category term="测试" scheme="http://www.bytedusk.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Hello World</title>
    <link href="http://www.bytedusk.com/2017/06/30/hexo-hello-world/"/>
    <id>http://www.bytedusk.com/2017/06/30/hexo-hello-world/</id>
    <published>2017-06-29T16:00:00.000Z</published>
    <updated>2021-01-19T07:40:08.664Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git Bash</a></li><li><a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo</a></li><li><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">NodeJS</a></li><li><a href="https://bitbucket.org/" target="_blank" rel="noopener">Bitbucket</a></li><li><a href="https://www.v2ex.com/t/362017" target="_blank" rel="noopener">Hexo 生成的博文内容不正常</a></li></ul><h3 id="建站思路"><a href="#建站思路" class="headerlink" title="建站思路"></a>建站思路</h3><ul><li>在域名提供商处申请个性化的域名</li><li>搭建本地环境 NodeJS + Hexo + 选用主题，部署到 Github</li><li>Github 已经提供私有仓库</li><li><del>将环境同步到 Bitbucket 的私有仓库，保证随时随地使用</del><br><del>Bitbucket 面向个人提供免费私有的仓库，最适合折腾一些小东西使用。</del></li></ul><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><p>我使用的主题是 polarbear，这里记录下使用过程中的一些坑。</p><ul><li><p>先安装Git，再安装NodeJS，将pnm的源设为淘宝源，然后使用npm的方式安装Hexo与Yarn。接着Hexo初始化，将你打算用的主题clone到${your_hexo_blog}/themes 下。设置如下源，避免网络原因导致下载失败：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org/</span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org/</span><br><span class="line">yarn config <span class="built_in">set</span> sass-binary-site http://npm.taobao.org/mirrors/node-sass</span><br></pre></td></tr></table></figure></li><li><p>安装顺序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nodejs -g</span><br><span class="line">sudo npm install hexo -g</span><br><span class="line">sudo npm install yarn -g</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件 _config.yml 的过程中，注意保持key/value之间的空格，否则会报莫名奇妙的错误</p></li><li><p>使用SSH方式部署到Github时，注意将本地生成的SSH Public key添加到合适位置。否则只有只读权限，提交更新时报错</p></li><li><p>具体环境ubuntu 20.04：Ubuntu已安装的cmdtest，yarn受cmdtest影响，需要移除cmdtest之后再安装之后。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gi
      
    
    </summary>
    
    
  </entry>
  
</feed>
